package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"
	"go.keploy.io/server/v2/graph/model"
	"go.keploy.io/server/v2/utils"
	"go.uber.org/zap"
)

// RunTestSet is the resolver for the runTestSet field.
func (r *mutationResolver) RunTestSet(ctx context.Context, testSet string, testRunId string, appId uint64) (error) {
	if r.Resolver == nil {
		err := fmt.Errorf(Emoji + "failed to get Resolver")
		return err
	}

	tester := r.Resolver.Tester

	if tester == nil {
		r.Logger.Error("failed to get tester from resolver")
		return fmt.Errorf(Emoji+"failed to run testSet:%v", testSet)
	}

	go func() {
		defer utils.HandlePanic(r.Resolver.Logger)
		r.Resolver.Logger.Debug("starting testrun...", zap.Any("testSet", testSet))
		tester.RunTestSet(ctx, testSet, testRunId, appId, r.Resolver.ServeTest)
	}()
	return nil
}

// StopProxy is the resolver for the stopProxy field.
func (r *mutationResolver) StopProxy(ctx context.Context) (bool, error) {
	// if r.Resolver == nil {
	// 	err := fmt.Errorf(Emoji + "failed to get Resolver")
	// 	return false, err
	// }

	// proxy := r.Resolver.Proxy

	// if proxy == nil {
	// 	r.Logger.Error("failed to get proxy from resolver")
	// 	return false, fmt.Errorf(Emoji + "failed to stop the proxy")
	// }

	// proxy.Stop()
	// r.Logger.Debug("proxy stopped")
	// return true, nil
	panic("not implemented")
}

// TestSets is the resolver for the testSets field.
func (r *queryResolver) TestSets(ctx context.Context) ([]string, error) {
	testSetIds := r.Resolver.tester.GetAllTestSetIds(ctx)
	if len(testSetIds) > 0 {
		r.Resolver.Logger.Debug(fmt.Sprintf("Retrieved test sets: %v", testSets), zap.Any("testPath", testPath))
	} else {
		r.Resolver.Logger.Debug("No test sets found in the current directory", zap.Any("testPath", testPath)) // ASK: directory where are we getting this from?
	}

	return testSetIds, nil
}

// TestSetStatus is the resolver for the testSetStatus field.
func (r *queryResolver) TestSetStatus(ctx context.Context, testRunID string, testSetId string) (*model.TestSetStatus, error) {
	if r.Resolver == nil {
		err := fmt.Errorf(Emoji + "failed to get Resolver")
		return nil, err
	}

	status, err := r.Resolver.tester.GetTestSetStatus(ctx, testRunID, testSetId)
	if err != nil {
		r.Resolver.Logger.Error("failed to get testSetStatus", zap.Error(err))
		return nil, err
	}

	r.Resolver.Logger.Debug("This is the status for the current testSet id.", zap.Any("testSetId", testSetId), zap.Any("testSetStatus", status))
	return status, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
